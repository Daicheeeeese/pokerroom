// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  reviews       Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Room {
  id              String            @id
  name            String
  description     String?
  capacity        Int
  address         String?
  prefecture      String?
  city            String?
  latitude        Float?
  longitude       Float?
  image           String?
  images          RoomImage[]
  hourlyPrices    HourlyPriceWeekday[]
  hourlyPricesHoliday HourlyPriceHoliday[]
  availability    RoomAvailability[]
  timeSlots       TimeSlot[]
  pricePerHour    Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bookings        Booking[]
  reviews         Review[]
  tags            Tag[]

  @@map("rooms")
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    String
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_images")
}

model HourlyPriceWeekday {
  id        String   @id @default(uuid())
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour])
  @@map("hourly_prices_weekday")
}

model HourlyPriceHoliday {
  id        String   @id @default(uuid())
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour])
  @@map("hourly_prices_holiday")
}

model Holiday {
  id        String   @id @default(uuid())
  date      DateTime @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("holidays")
}

model RoomAvailability {
  id        String   @id @default(cuid())
  roomId    String
  date      DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date])
  @@map("room_availability")
}

model TimeSlot {
  id        String   @id @default(cuid())
  roomId    String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date, startTime, endTime])
  @@map("time_slots")
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  totalPrice Int
  status    String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}
