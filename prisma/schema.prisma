generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("POSTGRES_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  reviews       Review[]

  @@map("users")
}

model Room {
  id                  String               @id
  name                String
  description         String?
  address             String?
  latitude            Float?
  longitude           Float?
  image               String?
  pricePerHour        Int
  capacity            Int
  prefecture          String?
  city                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  images              RoomImage[]
  hourlyPrices        HourlyPriceWeekday[]
  hourlyPricesHoliday HourlyPriceHoliday[]
  timeSlots           TimeSlot[]
  reviews             Review[]
  availability        RoomAvailability[]
  tags                Tag[]                @relation("RoomToTag")

  @@map("rooms")
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    String
  url       String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_images")
}

model HourlyPriceWeekday {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour], map: "hourly_prices_weekday_roomid_hour_key")
  @@map("hourly_prices_weekday")
}

model HourlyPriceHoliday {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour], map: "hourly_prices_holiday_roomid_hour_key")
  @@map("hourly_prices_holiday")
}

model TimeSlot {
  id          String   @id @default(cuid())
  roomId      String
  date        DateTime
  hour        Int
  minute      Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date, hour, minute])
  @@map("time_slots")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Tag {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  rooms     Room[]   @relation("RoomToTag")
}

model RoomTags {
  A String
  B String

  @@id([A, B], map: "_RoomTags_AB_pkey")
  @@index([B], map: "_RoomTags_B_index")
  @@map("_RoomTags")
}

model reservations {
  id         String   @id
  roomId     String
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  totalPrice Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model RoomAvailability {
  id        String   @id @default(cuid())
  roomId    String
  date      DateTime
  isAvailable Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date])
  @@map("room_availabilities")
}

model RoomToTag {
  A String
  B String

  @@id([A, B], map: "_RoomToTag_AB_pkey")
  @@index([B], map: "_RoomToTag_B_index")
  @@map("_RoomToTag")
}
