generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("POSTGRES_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_URL")
  relationMode      = "prisma"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  reviews       Review[]
  reservations  Reservation[]

  @@map("users")
}

model Room {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String
  address             String
  pricePerHour        Int
  capacity            Int
  businessHours       RoomBusinessHours[]
  options             Option[]
  images              RoomImage[]
  reviews             Review[]
  reservations        Reservation[]
  hourlyPricesWeekday HourlyPriceWeekday[]
  hourlyPricesHoliday HourlyPriceHoliday[]
  nearestStations     NearestStation[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@map("rooms")
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    Int
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("room_images")
}

model HourlyPriceWeekday {
  id        String   @id @default(cuid())
  roomId    Int
  pricePerHour     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endTime   String
  startTime String
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("hourly_prices_weekday")
}

model HourlyPriceHoliday {
  id        String   @id @default(cuid())
  roomId    Int
  pricePerHour     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endTime   String
  startTime String
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("hourly_prices_holiday")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
  @@map("reviews")
}

model Reservation {
  id          String            @id @default(cuid())
  roomId      Int
  room        Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  date        DateTime
  startTime   String
  endTime     String
  people      Int               @default(1)
  status      ReservationStatus @default(PENDING)
  totalPrice  Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  options     ReservationOption[]

  @@index([roomId])
  @@index([userId])
  @@index([date])
  @@map("reservations")
}

model ReservationOption {
  id             Int           @id @default(autoincrement())
  reservationId  String
  optionId       String
  quantity       Int           @default(1)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  reservation    Reservation   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  option         Option        @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([reservationId, optionId])
  @@map("reservation_options")
}

model NearestStation {
  id        String   @id @default(cuid())
  roomId    Int
  name      String
  transport String
  minutes   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@map("nearest_stations")
}

model RoomBusinessHours {
  id        String   @id @default(cuid())
  roomId    Int
  dayType   String   // "weekday" or "weekend"
  day       String   // "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"
  openTime  String
  closeTime String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@map("room_business_hours")
}

model Option {
  id          String   @id @default(cuid())
  roomId      Int
  option      String
  price       Float
  priceType   String
  unit        String
  isRequired  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  reservations ReservationOption[]

  @@map("option")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED

  @@map("ReservationStatus")
}
