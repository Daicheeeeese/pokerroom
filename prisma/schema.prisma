generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("POSTGRES_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_URL")
  relationMode      = "prisma"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  reviews       Review[]
  reservations  Reservation[]

  @@map("users")
}

model Room {
  id                  String               @id
  name                String
  description         String?
  address             String?
  latitude            Float?
  longitude           Float?
  image               String?
  pricePerHour        Int
  capacity            Int
  prefecture          String?
  city                String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  images              RoomImage[]
  hourlyPrices        HourlyPriceWeekday[]
  hourlyPricesHoliday HourlyPriceHoliday[]
  reviews             Review[]
  reservations        Reservation[]

  @@map("rooms")
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    String
  url       String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_images")
}

model HourlyPriceWeekday {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour], map: "hourly_prices_weekday_roomid_hour_key")
  @@map("hourly_prices_weekday")
}

model HourlyPriceHoliday {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour], map: "hourly_prices_holiday_roomid_hour_key")
  @@map("hourly_prices_holiday")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Reservation {
  id         String            @id @default(cuid())
  roomId     String
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  totalPrice Int
  status     ReservationStatus @default(PENDING)
  request    String?          // ユーザーの要望
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  room       Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([date])
  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
