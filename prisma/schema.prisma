generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reservations  Reservation[]

  @@map("users")
}

model Room {
  id            String      @id @default(cuid())
  name          String
  description   String?
  image         String
  capacity      Int
  pricePerHour  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reviews       Review[]
  reservations  Reservation[]
  hourlyPrices  HourlyPrice[]
  availabilities RoomAvailability[]
  address       String?     
  prefecture    String?     
  city          String?     
  latitude      Float?      
  longitude     Float?      

  @@map("rooms")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("reviews")
}

model Reservation {
  id         String   @id @default(cuid())
  roomId     String
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  totalPrice Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  room       Room     @relation(fields: [roomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model HourlyPrice {
  id        String   @id @default(cuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  hour      Int      
  price     Int      
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomId, hour])
  @@map("hourly_prices")
}

model RoomAvailability {
  id          String   @id @default(cuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])
  date        DateTime 
  isAvailable Boolean  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomId, date])
  @@map("room_availabilities")
}
