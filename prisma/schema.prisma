generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("POSTGRES_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_URL")
  relationMode      = "prisma"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  reviews       Review[]
  reservations  Reservation[]

  @@map("users")
}

model Room {
  id                  String               @id @default(cuid())
  name                String
  description         String
  address             String
  capacity            Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  nearestStations     NearestStation[]
  pricePerHour        Int
  hourlyPrices        HourlyPriceWeekday[]
  hourlyPricesHoliday HourlyPriceHoliday[]
  images              RoomImage[]
  reviews             Review[]
  reservations        Reservation[]

  @@map("rooms")
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    String
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("room_images")
}

model HourlyPriceWeekday {
  id        String   @id @default(cuid())
  roomId    String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endTime   String
  startTime String
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("hourly_prices_weekday")
}

model HourlyPriceHoliday {
  id        String   @id @default(cuid())
  roomId    String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endTime   String
  startTime String
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("hourly_prices_holiday")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
  @@map("reviews")
}

model Reservation {
  id         String            @id @default(cuid())
  roomId     String
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  totalPrice Int
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  room       Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([date])
  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED

  @@map("ReservationStatus")
}

model NearestStation {
  id          String   @id @default(cuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])
  name        String   // 駅名
  transport   String   // 移動手段（徒歩、バスなど）
  minutes     Int      // 所要時間（分）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([roomId])
  @@map("nearest_stations")
}
