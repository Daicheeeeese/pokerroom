generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reservations  Reservation[]

  @@map("users")
}

model Room {
  id              String           @id @default(cuid())
  name            String
  description     String?
  address         String?
  latitude        Float?
  longitude       Float?
  image           String?
  pricePerHour    Int
  capacity        Int
  prefecture      String?
  city            String?
  images          RoomImage[]
  hourlyPrices    HourlyPriceWeekday[]
  hourlyPricesHoliday HourlyPriceHoliday[]
  availability    RoomAvailability[]
  timeSlots       TimeSlot[]
  reservations    Reservation[]
  reviews         Review[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tags            Tag[]            @relation("RoomTags")

  @@map("rooms")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("reviews")
}

model Reservation {
  id         String   @id @default(cuid())
  roomId     String
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  totalPrice Int
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  room       Room     @relation(fields: [roomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model HourlyPriceWeekday {
  id        String   @id @default(uuid())
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour])
  @@map("hourly_prices_weekday")
}

model HourlyPriceHoliday {
  id        String   @id @default(uuid())
  roomId    String
  hour      Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, hour])
  @@map("hourly_prices_holiday")
}

model RoomAvailability {
  id          String   @id @default(cuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])
  date        DateTime 
  isAvailable Boolean  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomId, date])
  @@map("room_availabilities")
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  url       String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("room_images")
}

model TimeSlot {
  id          String   @id @default(cuid())
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id])
  date        DateTime
  hour        Int
  minute      Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomId, date, hour, minute])
  @@map("time_slots")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  rooms     Room[]   @relation("RoomTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Holiday {
  id          String   @id @default(cuid())
  date        DateTime
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date])
}
