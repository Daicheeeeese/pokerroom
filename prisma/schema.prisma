generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("POSTGRES_URL")
  shadowDatabaseUrl = env("POSTGRES_PRISMA_URL")
  relationMode      = "prisma"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  reviews       Review[]
  reservations  Reservation[]

  @@map("users")
}

model Room {
  name                String
  description         String
  address             String
  pricePerHour        Int
  capacity            Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  id                  String               @id @default(cuid())
  businessHours       RoomBusinessHours[]
  options             Option[]
  images              RoomImage[]
  reviews             Review[]
  reservations        Reservation[]
  nearestStations     NearestStation[]
  durationDiscounts   DurationDiscount[]
  earlyBirdDiscounts  EarlyBirdDiscount[]
  extensionRates      ExtensionRate[]
  minimumPersons      MinimumPerson[]
  entryFees           EntryFee[]

  @@map("rooms")
}

model RoomImage {
  id        String   @id @default(cuid())
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])

  @@map("room_images")
}


model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
  @@map("reviews")
}

model Reservation {
  id         String              @id @default(cuid())
  userId     String
  date       DateTime
  startTime  String
  endTime    String
  totalPrice Int
  status     ReservationStatus   @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  people     Int                 @default(1)
  roomId     String
  room       Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  options    ReservationOption[]

  @@index([roomId])
  @@index([userId])
  @@index([date])
  @@map("reservations")
}

model ReservationOption {
  id            Int         @id @default(autoincrement())
  reservationId String
  optionId      String
  quantity      Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  option        Option      @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([reservationId, optionId])
  @@map("reservation_options")
}

model NearestStation {
  id        String   @id @default(cuid())
  name      String
  transport String
  minutes   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@map("nearest_stations")
}

model RoomBusinessHours {
  id        String   @id @default(cuid())
  dayType   String
  openTime  String
  closeTime String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       String
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@map("room_business_hours")
}

model Option {
  id           String              @id @default(cuid())
  name         String
  price        Float
  unit         String
  isRequired   Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  roomId       String
  room         Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  reservations ReservationOption[]

  @@map("options")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED

  @@map("ReservationStatus")
}

model Holiday {
  id        String   @id @default(cuid())
  date      DateTime
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("holidays")
  @@index([date])
}

model DurationDiscount {
  id          String   @id @default(cuid())
  minHours    Int
  discountPct Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("duration_discounts")
  @@index([roomId])
}

model EarlyBirdDiscount {
  id          String   @id @default(cuid())
  cutoffStart String
  cutoffEnd   String
  discountPct Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roomId      String
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("early_bird_discounts")
  @@index([roomId])
}

model ExtensionRate {
  id        String   @id @default(cuid())
  minHours  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("extension_rates")
  @@index([roomId])
}

model MinimumPerson {
  id        String   @id @default(cuid())
  minPeople Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("minimum_persons")
  @@index([roomId])
}

model EntryFee {
  id           String   @id @default(cuid())
  feePerPerson Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roomId       String
  room         Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("entry_fees")
  @@index([roomId])
}
